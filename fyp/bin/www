#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fyp:server');
var http = require('http');
var socketIo=require('socket.io');


/**
 * Get port from environment and store in Express.
 */
const { connectToDB, ObjectId } = require('../utils/db');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io=socketIo(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,()=>{
monitorChanges(io);

});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Socket.IO connection event
io.on('connection', (socket) => {
  console.log('A user connected',socket.id);

// Handle events from the client
socket.on('eventFromClient', (data) => {
  
  console.log('Received data from client:',data);
  // Broadcast the data to all connected clients
  io.emit('eventFromServer',"toooo");
  });
  socket.on('connect',()=>{
    io.emit('connectwithyou',"yo")
  })

  
  // Handle disconnection
  socket.on('disconnect', () => {
  console.log('A user disconnected');
  });
});



async function monitorChanges(io) {
  const db = await connectToDB();
  const collection = db.collection("course");
  const changeStream = collection.watch([
    { $match: { "operationType": { $in: ["insert", "update", "replace"] } } },
    { $project: { "_id": 1, "fullDocument": 1, "ns": 1, "documentKey": 1 } }
  ], { fullDocument: "updateLookup" });

  console.log("start monitoring the changes of announcement");

  changeStream.on('change', async (change) => {
    io.emit('db update', change.fullDocument);
  });

  changeStream.on('error', (error) => {
    console.error('Change stream error:', error);
  });
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
