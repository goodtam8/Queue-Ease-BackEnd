#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('fyp:server');
var http = require('http');
const { initializeModel } = require('../routes/linear');

/**
 * Get port from environment and store in Express.
 */
const { connectToDB, ObjectId } = require('../utils/db');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Async initialization wrapper
 */
async function startServer() {
    try {
        // Initialize model first
        await initializeModel();
        
        // Start listening after successful initialization
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
        
        console.log('Model initialization completed successfully');
    } catch (error) {
        console.error('Failed to initialize model:', error);
        process.exit(1);
    }
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') throw error;
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log(`Server running on ${bind}`);
}

// Start the application
startServer();
